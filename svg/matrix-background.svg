<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     viewBox="0 0 100 100" preserveAspectRatio="xMidYMid slice">
  <defs>
    <!-- Blur filter for smoother edges -->
    <filter id="blur" x="-20%" y="-20%" width="140%" height="140%">
    <feGaussianBlur in="SourceGraphic" stdDeviation="0.1"/>
    </filter>

    <!-- The three allowed character arrays (documented for reference)
         set1 = ["ゲ","ネ","シ","ス","9","4","ミ","ツ","マ","1","0","ラ","キ","サ","5","ヌ","メ","2","ワ","8","ク","3","テ","リ","7","セ","ロ","6","カ","ヨ"]
         set2 = ["ヨ","カ","6","ロ","セ","7","リ","テ","3","ク","8","ワ","2","メ","ヌ","5","サ","キ","ラ","0","1","マ","ツ","4","9","ス","シ","ネ","ゲ"]
         set3 = ["ゲ","ネ","シ","ス","9","4","ミ","ツ","マ","1","0","ラ","キ","サ","5","ヌ"]
    -->
  </defs>

  <!-- Black background -->
  <rect width="100%" height="100%" fill="black"/>

  <!-- Layers (content will be generated by the script) -->
  <g id="background" filter="url(#blur)"></g>
  <g id="foreground" filter="url(#blur)"></g>

  <!--
    The JavaScript below creates many columns.
    Each column:
      • Is assigned a horizontal slot so that columns in the same layer do not overlap.
      • Is given a random number of characters (between 5 and 40), which determines its text height.
      • Has its vertical animation set so that its bottom appears when it touches the top edge
        (i.e. at y = –textHeight) and its top disappears when it touches the bottom edge (y = 100).
      • Uses two copies (with staggered start times) for a seamless drop.
      • Re‑randomizes its horizontal position within its slot at the end of its cycle.
  -->
  <script type="application/ecmascript"><![CDATA[
    (function() {
      var svgns = "http://www.w3.org/2000/svg";

      // Define the three allowed character sets.
      var allowedSets = [
        ["ゲ","ネ","シ","ス","9","4","ミ","ツ","マ","1","0","ラ","キ","サ","5","ヌ","メ","2","ワ","8","ク","3","テ","リ","7","セ","ロ","6","カ","ヨ"],
        ["ヨ","カ","6","ロ","セ","7","リ","テ","3","ク","8","ワ","2","メ","ヌ","5","サ","キ","ラ","0","1","マ","ツ","4","9","ス","シ","ネ","ゲ"],
        ["ゲ","ネ","シ","ス","9","4","ミ","ツ","マ","1","0","ラ","キ","サ","5","ヌ"]
      ];

      // Helper: Returns a random element from an array.
      function randomFrom(array) {
        return array[Math.floor(Math.random() * array.length)];
      }

      // Create a text element with a random number of characters (between 5 and 40)
      // chosen from the given allowed set.
      // Returns an object { textElem, height } where height = numChars * lineHeight.
      function createRandomText(allowed, fill, fontFamily, fontSize) {
        var numChars = Math.floor(5 + Math.random() * 35); // between 5 and 40 characters
        var lineHeight = 2;  // fixed line-height (in SVG units)
        var textHeight = numChars * lineHeight;
        var textElem = document.createElementNS(svgns, "text");
        textElem.setAttribute("x", "0");
        textElem.setAttribute("y", "0");
        textElem.setAttribute("fill", fill);
        textElem.setAttribute("font-family", fontFamily);
        textElem.setAttribute("font-size", fontSize);
        // For the first tspan, use dy="0" so that the text's top is at y=0.
        var tspan = document.createElementNS(svgns, "tspan");
        tspan.setAttribute("x", "0");
        tspan.setAttribute("dy", "0");
        tspan.textContent = randomFrom(allowed);
        textElem.appendChild(tspan);
        for (var i = 1; i < numChars; i++) {
          var tspan = document.createElementNS(svgns, "tspan");
          tspan.setAttribute("x", "0");
          tspan.setAttribute("dy", lineHeight.toString());
          tspan.textContent = randomFrom(allowed);
          textElem.appendChild(tspan);
        }
        return { textElem: textElem, height: textHeight };
      }

      // Create a column group with two copies of randomly generated text.
      // The vertical animation is set so that:
      //   - The text starts at y = -textHeight (so its bottom touches the top edge)
      //   - It ends at y = 100 (so its top touches the bottom edge).
      // isForeground: if true, scale 1 and faster cycle; else scale 0.7 and slower cycle.
      function createColumn(isForeground) {
        var g = document.createElementNS(svgns, "g");
        // Horizontal position (x) will be set later (based on a nonoverlapping slot).

        // Choose a random allowed set.
        var allowed = randomFrom(allowedSets);
        var fill = "#ff0000";
        var fontFamily = "monospace";
        var fontSize = "2";
        // Generate a random text element and obtain its height.
        var textData = createRandomText(allowed, fill, fontFamily, fontSize);
        var H = textData.height; // text height (in units)

        // Set vertical animation:
        // Start: text at y = -H (so its bottom is at 0)
        // End: text at y = 100 (so its top touches 100)
        var startY = -50;
        var endY = 150;
        // Cycle duration (foreground falls faster than background)
        var dur = isForeground ? (10 + Math.random() * 10) : (15 + Math.random() * 10);
        var scale = isForeground ? 1 : 0.7;
        // Set the group transform (x will be assigned later).
        g.setAttribute("transform", "translate(0,0) scale(" + scale + ")");

        // Create two copies for seamless looping.
        for (var i = 0; i < 2; i++) {
          var textCopy = textData.textElem.cloneNode(true);

          // Animate vertical motion.
          var animateMotion = document.createElementNS(svgns, "animateMotion");
          var beginTime = i === 0 ? "0s" : "-" + (dur / 2) + "s";
          animateMotion.setAttribute("begin", beginTime);
          animateMotion.setAttribute("dur", dur + "s");
          animateMotion.setAttribute("repeatCount", "indefinite");
          animateMotion.setAttribute("path", "M 0," + startY + " L 0," + endY);
          textCopy.appendChild(animateMotion);

          // Animate opacity with smoother fade.
          var animateOpacity = document.createElementNS(svgns, "animate");
          animateOpacity.setAttribute("attributeName", "opacity");
          var baseOpacity = isForeground ? 0.85 : 0.5;
          animateOpacity.setAttribute("values", "0;" + baseOpacity + ";" + baseOpacity + ";0");
          // Adjusted keyTimes to extend the fade duration (10% at start and 10% at end).
          animateOpacity.setAttribute("keyTimes", "0;0.1;0.9;1");
          // Use spline interpolation for a smoother fade.
          animateOpacity.setAttribute("calcMode", "spline");
          animateOpacity.setAttribute("keySplines", "0.42 0 0.58 1; 0.42 0 0.58 1; 0.42 0 0.58 1");
          animateOpacity.setAttribute("dur", dur + "s");
          animateOpacity.setAttribute("repeatCount", "indefinite");
          textCopy.appendChild(animateOpacity);

          g.appendChild(textCopy);
        }
        return { element: g, cycle: dur };
      }

      // Get parent layers.
      var backgroundGroup = document.getElementById("background");
      var foregroundGroup = document.getElementById("foreground");

      // Arrays to keep track of columns.
      var bgColumns = [];
      var fgColumns = [];

      // For nonoverlapping placement, assign each column a horizontal slot.
      var bgCount = 30, fgCount = 10;

      // Create background columns.
      for (var i = 0; i < bgCount; i++) {
        var col = createColumn(false);
        col.element.id = "bgCol" + i;
        var slot = 100 / bgCount;
        // Choose x randomly within that slot.
        var x = i * slot + Math.random() * slot;
        var scale = 0.7;
        col.element.setAttribute("transform", "translate(" + x + ",0) scale(" + scale + ")");
        backgroundGroup.appendChild(col.element);
        bgColumns.push({ id: col.element.id, cycle: col.cycle, slot: slot, index: i });
      }

      // Create foreground columns.
      for (var i = 0; i < fgCount; i++) {
        var col = createColumn(true);
        col.element.id = "fgCol" + i;
        var slot = 100 / fgCount;
        var x = i * slot + Math.random() * slot;
        var scale = 1;
        col.element.setAttribute("transform", "translate(" + x + ",0) scale(" + scale + ")");
        foregroundGroup.appendChild(col.element);
        fgColumns.push({ id: col.element.id, cycle: col.cycle, slot: slot, index: i });
      }

      // Re-randomize horizontal position within its slot at the end of each cycle.
      function updateColumnPosition(elem, colData, isForeground) {
        var x = colData.index * colData.slot + Math.random() * colData.slot;
        var scale = isForeground ? 1 : 0.7;
        elem.setAttribute("transform", "translate(" + x + ",0) scale(" + scale + ")");
      }

      // Set intervals for background columns.
      bgColumns.forEach(function(col) {
        var elem = document.getElementById(col.id);
        setInterval(function() {
          updateColumnPosition(elem, col, false);
        }, Global.Infinity);
      });

      // Set intervals for foreground columns.
      fgColumns.forEach(function(col) {
        var elem = document.getElementById(col.id);
        setInterval(function() {
          updateColumnPosition(elem, col, true);
        }, Global.Infinity);
      });
    })();
  ]]></script>
</svg>
<!-- © 2025 Warvdoh Mróz. Licensed under Warvdoh's Personal Use License (WPUL). Contact: lucti@protonmail.com -->
<!-- More assets and LICENSE.md at: https://github.com/Warvdoh/Assets -->
